import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker



def main():
    fig, ax = plt.subplots(2,3, figsize=(16, 8))

    colors = {
        'usnet': 'tab:blue',
        'mutualnet': 'tab:orange',
        'pssf': 'tab:green',
        'pssg': 'tab:green',
        'pssc': 'tab:green',
        'pssm': 'tab:red',
    }

    """ pss mbv1 flops """
    x_usnet = [569, 542, 517, 490, 466, 443, 421, 389, 366, 345, 325, 306, 287, 267, 249, 232, 217, 201, 177, 162, 149, 136, 124, 114]
    y_usnet = [71.8, 71.7, 71.6, 71.3, 71.3, 70.9, 70.6, 70.3, 69.8, 69.7, 69.5, 69.1, 68.8, 68.3, 67.8, 67.5, 66.8, 66.3, 65.6, 65.0, 64.2, 63.5, 62.7, 61.9]
    ax[0,0].plot(x_usnet, y_usnet, 'P', c=colors['usnet'], markersize=7, alpha=0.7, label='USNet')

    x_munet = [569, 518, 466, 418, 380, 342, 309, 269, 239, 215, 187, 166, 146, 127, 111]
    y_munet = [72.4, 71.7, 71.2, 70.9, 70.6, 70.2, 69.7, 69.1, 68.4, 67.7, 67.2, 66.5, 65.6, 64.7, 63.5]
    ax[0,0].plot(x_munet, y_munet, 'X', c=colors['mutualnet'], markersize=7, alpha=0.7, label='MutualNet')

    x_pss = [568.79, 555.01, 553.59, 538.95, 531.93, 520.77, 509.34, 495.66, 487.99, 478.35, 471.29, 462.83, 447.71, 443.0, 434.65, 421.01, 413.21, 404.11, 386.19, 375.53, 374.91, 358.39, 353.72, 343.38, 334.85, 323.69, 310.07, 300.4, 294.65, 278.94, 272.82, 257.09, 252.98, 243.77, 225.55, 219.54, 214.39, 199.84, 194.58, 184.44, 174.01, 159.7, 147.16, 136.93, 126.28, 123.04, 106.78]
    y_pss = [74.09, 74.16, 74.05, 74.05, 74.05, 73.86, 73.89, 73.77, 73.3, 73.67, 73.15, 73.46, 73.2, 73.57, 73.22, 73.23, 73.13, 72.93, 72.84, 73.08, 73.21, 73.04, 72.93, 72.69, 72.59, 72.58, 72.39, 72.17, 72.2, 72.02, 72.1, 71.4, 71.53, 71.38, 71.33, 71.0, 70.28, 70.27, 70.22, 70.09, 69.22, 68.24, 68.29, 68.06, 68.1, 67.92, 67.9]
    ax[0,0].plot(x_pss, y_pss, '^', c=colors['pssf'], alpha=0.7, markersize=7, label=r'PSS-Net$_{F}$')

    ax[0,0].set_title('FLOPs Constraints', fontsize=14, )
    ax[0,0].set_ylabel('MBV1 Top-1 Acc (%)', fontsize=14, )
    ax[0,0].tick_params(axis='both', labelsize=14)
    ax[0,0].grid(alpha=0.3)
    ax[0,0].xaxis.set_major_locator(ticker.MultipleLocator(100))



    """ pss mbv1 gpu latency """
    x_usnet = [238, 234, 227, 225, 219, 211, 208, 195, 187, 183, 175, 172, 166, 159, 153, 146, 143, 138, 122, 114, 108, 105, 103, 100, 91, 86, 83, 78, 76, 59]
    y_usnet = [71.8, 71.7, 71.6, 71.3, 71.3, 70.9, 70.6, 70.3, 69.8, 69.7, 69.5, 69.1, 68.8, 68.3, 67.8, 67.5, 66.8, 66.3, 65.6, 65.0, 64.2, 63.5, 62.7, 61.9, 61.0, 60.0, 59.0, 58.1, 57.3, 55.8]
    ax[0,1].plot(x_usnet, y_usnet, 'P', c=colors['usnet'], markersize=7, alpha=0.7, label='USNet')

    x_munet = [239, 228, 220, 181, 172, 166, 157, 143, 132, 116, 104, 97, 92, 85, 80, 60]
    y_munet = [72.4, 71.7, 71.2, 70.9, 70.6, 70.2, 69.7, 69.1, 68.4, 67.7, 67.2, 66.5, 65.6, 64.7, 63.5, 60.3]
    ax[0,1].plot(x_munet, y_munet, 'X', c=colors['mutualnet'], markersize=7, alpha=0.7, label='MutualNet')

    x_pss = [238.79, 231.01, 219.84, 209.78, 200.76, 189.31, 172.85, 171.52, 159.95, 151.72, 138.56, 127.67, 118.34, 111.33, 101.27, 84.55, 79.82, 66.67]
    y_pss = [74.37, 74.12, 73.92, 73.78, 73.48, 73.18, 73.09, 73.29, 72.92, 72.59, 72.44, 71.87, 71.73, 70.94, 70.21, 68.45, 68.43, 67.88]
    ax[0,1].plot(x_pss, y_pss, '>', c=colors['pssg'], markersize=7, alpha=0.7, label='PSS-Net$_{G}$')

    ax[0,1].set_title('GPU Latency Constraints', fontsize=14, )
    ax[0,1].tick_params(axis='both', labelsize=14)
    ax[0,1].grid(alpha=0.3)



    """ pss mbv1 cpu latency """
    x_usnet = [36, 33, 35, 34, 31, 28, 29, 31, 28, 26, 23, 24, 25, 25, 22, 20, 21, 21, 18, 16, 14, 15, 16, 15, 13, 12, 13, 13, 13, 10]
    y_usnet = [71.8, 71.7, 71.6, 71.3, 71.3, 70.9, 70.6, 70.3, 69.8, 69.7, 69.5, 69.1, 68.8, 68.3, 67.8, 67.5, 66.8, 66.3, 65.6, 65.0, 64.2, 63.5, 62.7, 61.9, 61.0, 60.0, 59.0, 58.1, 57.3, 55.8]
    ax[0,2].plot(x_usnet, y_usnet, 'P', c=colors['usnet'], markersize=7, alpha=0.7, label='USNet')

    x_munet = [37, 36, 32, 26, 28, 27, 25, 25, 21, 19, 18, 15, 16, 14, 13, 9]
    y_munet = [72.4, 71.7, 71.2, 70.9, 70.6, 70.2, 69.7, 69.1, 68.4, 67.7, 67.2, 66.5, 65.6, 64.7, 63.5, 60.3]
    ax[0,2].plot(x_munet, y_munet, 'X', c=colors['mutualnet'], markersize=7, alpha=0.7, label='MutualNet')

    x_pss = [32, 32, 32, 31, 30, 29, 28, 27, 26, 25, 23, 22, 22, 21, 20, 18, 18, 16, 15, 14, 13, 11]
    y_pss = [74.1, 73.99, 74.17, 74.0, 73.94, 73.82, 73.56, 73.51, 73.45, 73.38, 73.16, 72.96, 73.01, 72.7, 72.45, 70.99, 71.48, 70.23, 69.86, 68.38, 68.28, 67.98]
    ax[0,2].plot(x_pss, y_pss, '<', c=colors['pssc'], markersize=7, alpha=0.7, label='PSS-Net$_{C}$')

    ax[0,2].set_title('CPU Latency Constraints', fontsize=14, )
    ax[0,2].tick_params(axis='both', labelsize=14)
    ax[0,2].grid(alpha=0.3)




    """ pss mbv1 multiple """
    x_pss = [568.79, 562.13, 554.97, 544.22, 532.98, 521.25, 513.86, 497.15, 490.46, 482.12, 473.48, 457.58, 446.43, 438.89, 433.13, 418.96, 411.59, 401.49, 388.39, 377.07, 367.86, 361.92, 353.2, 343.29, 333.71, 316.59, 311.93, 297.07, 294.01, 284.72, 270.48, 264.26, 254.16, 242.89, 232.34, 222.3, 212.14, 203.03, 194.59, 184.99, 172.79, 163.68, 150.7, 139.94, 126.08, 118.22, 106.78]
    y_pss = [74.418, 74.468, 74.396, 74.338, 74.112, 74.074, 74.062, 73.86, 73.68, 73.65, 73.738, 73.574, 73.378, 73.4, 73.402, 73.264, 73.032, 72.996, 72.938, 72.856, 73.092, 73.108, 72.798, 72.93, 72.834, 72.562, 72.38, 72.37, 72.258, 71.832, 71.606, 71.698, 71.446, 71.488, 71.344, 71.208, 70.966, 70.586, 70.086, 69.854, 69.638, 67.924, 68.046, 68.07, 68.004, 68.064, 68.038]
    ax[0,0].plot(x_pss, y_pss, 'rv', markersize=7, alpha=0.7, label='PSS-Net$_{M}$')

    x_pss = [236.14, 234.87, 224.08, 210.47, 196.87, 189.59, 184.98, 165.63, 164.01, 151.7, 143.77, 134.6, 120.1, 113.69, 100.92, 94.28, 80.2, 71.03]
    y_pss = [74.468, 74.396, 74.074, 73.738, 73.402, 73.264, 73.032, 73.108, 72.93, 72.562, 72.38, 71.832, 71.488, 71.208, 70.086, 69.638, 68.07, 68.064]
    ax[0,1].plot(x_pss, y_pss, 'rv', markersize=7, alpha=0.7, label='PSS-Net$_{M}$')

    x_pss = [34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]
    y_pss = [74.418, 74.338, 74.396, 74.254, 74.468, 74.074, 73.224, 73.574, 73.378, 73.032, 73.01, 73.092, 72.858, 72.458, 71.832, 71.446, 71.488, 71.208, 70.07, 69.34, 69.638, 68.07, 68.064, 68.038]
    ax[0,2].plot(x_pss, y_pss, 'rv', markersize=7, alpha=0.7, label='PSS-Net$_{M}$')




    """ pss mbv2 flops """
    x_usnet = [300, 299, 284, 274, 269, 268, 254, 235, 222, 213, 209, 185, 173, 165, 161, 161, 151, 150, 106, 100, 97, 96, 88, 88, 80, 80, 59]
    y_usnet = [71.5, 71.5, 71.2, 71.1, 70.9, 70.9, 70.6, 70.1, 70.0, 69.8, 69.6, 69.3, 68.9, 68.6, 68.3, 68.3, 67.6, 67.6, 65.6, 65.4, 65.1, 64.9, 64.2, 64.2, 63.4, 63.3, 62.3]
    ax[1,0].plot(x_usnet, y_usnet, 'P', c=colors['usnet'], markersize=7, alpha=0.7, label='USNet')

    x_munet = [300, 284, 269, 254, 221, 209, 198, 187, 164, 154, 128, 107, 89, 84, 57]
    y_munet = [72.9, 72.7, 72.4, 72.0, 71.8, 71.6, 71.4, 71.0, 70.4, 70.1, 69.6, 68.3, 67.6, 65.8, 64.2]
    ax[1,0].plot(x_munet, y_munet, 'X', c=colors['mutualnet'], markersize=7, alpha=0.7, label='MutualNet')

    x_pss = [300.84, 293.86, 284.92, 268.51, 262.75, 249.19, 241.31, 234.18, 220.72, 209.02, 203.0, 190.77, 182.71, 174.68, 164.57, 154.12, 144.47, 133.62, 123.08, 112.02, 104.46, 91.84, 84.06, 69.15]
    y_pss = [73.404, 73.268, 73.104, 72.732, 72.64, 72.498, 72.376, 72.302, 72.376, 72.164, 72.05, 71.758, 71.54, 71.176, 71.018, 70.672, 70.41, 70.006, 69.608, 68.844, 68.552, 66.776, 66.768, 66.448]
    pssf, = ax[1,0].plot(x_pss, y_pss, '^', c=colors['pssf'], markersize=7, alpha=0.7, label='PSS-Net$_{F}$')

    ax[1,0].set_ylabel('MBV2 Top-1 Acc (%)', fontsize=14, )
    ax[1,0].set_xlabel('FLOPs (M)', fontsize=14, )
    ax[1,0].tick_params(axis='both', labelsize=14)
    ax[1,0].grid(alpha=0.3)
    ax[1,0].xaxis.set_major_locator(ticker.MultipleLocator(50))
    ax[1,0].set_ylim(61.8, 74)


    """ pss mbv2 gpu latency """
    x_usnet = [269, 269, 268, 267, 267, 266, 267, 259, 258, 257, 257, 254, 250, 249, 249, 248, 248, 247, 236, 235, 235, 234, 234, 233, 232, 232, 229]
    y_usnet = [71.5, 71.5, 71.2, 71.1, 70.9, 70.9, 70.6, 70.1, 70, 69.8, 69.6, 69.3, 68.9, 68.6, 68.3, 68.3, 67.6, 67.6, 65.6, 65.4, 65.1, 64.9, 64.2, 64.2, 63.4, 63.3, 62.3]
    ax[1,1].plot(x_usnet, y_usnet, 'P', c=colors['usnet'], markersize=7, alpha=0.7, label='USNet')

    x_munet = [275, 273, 272, 272, 210, 209, 208, 207, 199, 199, 194, 149, 146, 111, 105]
    y_munet = [72.9, 72.7, 72.4, 72.0, 71.8, 71.6, 71.4, 71.0, 70.4, 70.1, 69.6, 68.3, 67.6, 65.8, 64.2]
    ax[1,1].plot(x_munet, y_munet, 'X', c=colors['mutualnet'], markersize=7, alpha=0.7, label='MutualNet')

    x_pss = [268.42, 260.33, 252.47, 234.08, 224.58, 225.21, 202.54, 197.13, 191.99, 178.9, 167.55, 165.53, 145.64, 145.28, 128.73, 126.37, 105.86, 100.66]
    y_pss = [73.35, 73.38, 72.758, 72.716, 72.604, 72.358, 72.456, 72.488, 72.096, 71.994, 71.704, 71.238, 70.736, 70.404, 69.432, 68.694, 67.116, 66.476]
    pssg, = ax[1,1].plot(x_pss, y_pss, '>', c=colors['pssg'], markersize=7, alpha=0.7, label='PSS-Net$_{G}$')


    ax[1,1].set_xlabel('GPU Latency ($\mu$s)', fontsize=14, )
    ax[1,1].tick_params(axis='both', labelsize=14)
    ax[1,1].grid(alpha=0.3)
    ax[1,1].set_ylim(61.8, 74)

    """ pss mbv2 cpu latency """
    x_usnet = [41, 40, 39, 34, 37, 35, 34, 41, 35, 38, 38, 37, 34, 38, 34, 35, 38, 36, 37, 36, 35, 36, 35, 36, 36, 35, 36]
    y_usnet = [71.5, 71.5, 71.2, 71.1, 70.9, 70.9, 70.6, 70.1, 70, 69.8, 69.6, 69.3, 68.9, 68.6, 68.3, 68.3, 67.6, 67.6, 65.6, 65.4, 65.1, 64.9, 64.2, 64.2, 63.4, 63.3, 62.3]
    usnet, = ax[1,2].plot(x_usnet, y_usnet, 'P', c=colors['usnet'], markersize=7, alpha=0.7, label='USNet')

    x_munet = [41, 38, 39, 32, 26, 26, 26, 25, 26, 27, 26, 21, 21, 17, 16]
    y_munet = [72.9, 72.7, 72.4, 72.0, 71.8, 71.6, 71.4, 71.0, 70.4, 70.1, 69.6, 68.3, 67.6, 65.8, 64.2]
    mutualnet, = ax[1,2].plot(x_munet, y_munet, 'X', c=colors['mutualnet'], markersize=7, alpha=0.7, label='MutualNet')

    x_pss = [42, 38, 34, 34, 31, 30, 27, 27, 24, 23, 23, 22, 20, 19, 18, 17, 16]
    y_pss = [73.298, 73.178, 72.224, 72.842, 72.504, 73.218, 72.638, 72.974, 72.396, 71.122, 72.186, 71.652, 70.354, 69.9, 68.974, 67.8, 66.496]
    pssc, = ax[1,2].plot(x_pss, y_pss, '<', c=colors['pssc'], markersize=7, alpha=0.7, label='PSS-Net$_{C}$')



    ax[1,2].set_xlabel('CPU Latency (ms)', fontsize=14, )
    ax[1,2].tick_params(axis='both', labelsize=14)
    ax[1,2].grid(alpha=0.3)
    ax[1,2].set_ylim(61.8, 74)


    """ pss mbv2 multiple """
    x_pss = [300.84, 294.74, 284.92, 272.99, 264.18, 253.15, 242.19, 227.41, 221.36, 210.12, 203.82, 194.94, 177.58, 174.01, 162.82, 154.12, 144.65, 132.39, 122.79, 111.49, 104.1, 91.6, 82.83, 69.15]
    y_pss = [73.368, 73.396, 73.12, 72.792, 72.942, 72.762, 72.542, 72.006, 72.538, 72.298, 72.126, 72.014, 71.432, 71.388, 70.854, 70.684, 70.474, 70.048, 69.82, 68.79, 68.728, 66.58, 66.666, 66.384]
    pssm, = ax[1,0].plot(x_pss, y_pss, 'rv', markersize=7, alpha=0.7, label='PSS-Net$_{M}$')

    x_pss = [268.17, 259.54, 251.77, 241.09, 234.2, 224.45, 223.7, 202.49, 191.24, 178.44, 174.28, 167.55, 149.55, 140.66, 130.08, 124.35, 121.52, 104.76]
    y_pss = [73.368, 73.396, 72.934, 72.762, 72.942, 72.436, 72.006, 72.538, 72.298, 71.408, 71.868, 70.854, 70.684, 70.066, 69.142, 68.402, 68.128, 66.734]
    ax[1,1].plot(x_pss, y_pss, 'rv', markersize=7, alpha=0.7, label='PSS-Net$_{M}$')

    x_pss = [41, 38, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 27, 26, 24, 23, 22, 21, 20, 19, 18, 17, 16]
    y_pss = [73.12, 73.368, 72.51, 72.934, 72.916, 73.396, 73.034, 73.076, 72.298, 72.888, 72.542, 72.432, 72.252, 72.014, 71.938, 71.588, 70.726, 70.684, 69.428, 68.79, 68.402, 66.666, 66.734]
    ax[1,2].plot(x_pss, y_pss, 'rv', markersize=7, alpha=0.7, label='PSS-Net$_{M}$')



    fig.subplots_adjust(hspace = 0.15)
    fig.legend([pssm, pssf, pssg, pssc, mutualnet, usnet, ], ['PSS-Net$_{M}$', 'PSS-Net$_{F}$', 'PSS-Net$_{G}$', 'PSS-Net$_{C}$', 'MutualNet', 'USNet', ], ncol=6, fontsize=14, loc='lower left', bbox_to_anchor=(0.18, 0.90), frameon=False)
    fig.savefig('main_result.png', bbox_inches='tight', pad_inches=0.03)



if __name__ == '__main__':
    main()